#  Урок 02. Семинар. Знакомство с языком Python (продолжение)
# ====================================================================================================

# Цикл while
# ------------------------------------------------------------------------------------------------------
# while условие:
#     тело цикла
# else:
# ----------------------------------------------------------------------------------------------------
# while True:
#     pass # Тут пишу логическое выражение. 
# # pass - пропуск, пишу, чтобы не было ошибки, когда ещё незнаю, что написать.
# else:
#     print('123')
# -----------------------------------------------------------------------------------------------------
# Пример: Вывод цифр от 0 до 10.
# -----------------------------------------------------------------------------------------------------
# i = 0
# while i < 11:
#     print(i, end=' ') # Выведит в одной строке через пробел.
#     # print(i) # Выведит каждый элемент с новой строки.
#     i += 1
#     # break # принудительно завершит выполнение программы после отбражения первого элемента, else не будет работать.
# else:
#     print('END') # Выведит в конце END
# ========================================================================================================

# ЗАДАЧИ:
# ========================================================================================================

# # 1. Напишите программу, которая принимает на вход число N и выдаёт последовательность из N членов.
# *Пример:*
# - Для N = 5: 1, -3, 9, -27, 81
# ========================================================================================================
# РЕШЕНИЕ:

# number = int(input('Введите число: '))
# numbers = [1]
# for i in range(number - 1):
#     num = numbers[i] * -3
#     numbers.append(num)
# print(numbers)
# ----------------------------------------------------------------------------------------------------
# n = int(input('Введите число n: '))
# for x in range(n):
#     result = (-3) ** x
#     print(result, end= ' ')
# ----------------------------------------------------------------------------------------------------
# n = int(input('Введите число: '))
# i = 0
# while i < n: # Условие, пока i < n.
#     print((-3) ** i, end= ' ') # Тело цикла. 
#     i += 1
# ========================================================================================================
# МАРЖИ - маржовый оператор.
# while x:= int(input('--> ')) < 0: # В цикле while запрашивает значение x у пользователя.
#     print('Введите число больше нуля')
# ---------------------------------------------------------------------------------------------------------
# Без маржового оператора код длиннее.
# x = int(input('--> '))
# while x < 0:
#     print('Введите число больше нуля')
#     x = int(input('--> '))
# ========================================================================================================

# 2. Для натурального n создать последовательности 3n + 1.
# *Пример:*
# - Для n = 6: {1: 4, 2: 7, 3: 10, 4: 13, 5: 16, 6: 19}
# ========================================================================================================
# РЕШИЕНИЕ:

# n = int(input('Введите число: '))
# for i in range(1, n + 1):
#     print(3 * i + 1, end= ' ')
# --------------------------------------------------------------------------------------------------------
# number = int(input('Введите число: '))
# for i in range(1, number + 1):
#     num = (3 * i + 1)
#     print(f'{i}: {num}')
# --------------------------------------------------------------------------------------------------------
# num = int(input('Введите число n: '))
# for x in range(1, num + 1):
#     result = 3 * x + 1
#     print(result, end= ' ')
# --------------------------------------------------------------------------------------------------------
# def dict_comprehension() -> dict:
#     try:
#         n = int(input('Введите целое число >= 0: '))
#         if n > 0:
#             # Генератор словаря(dict_comprehension)
#             dict = {k: (3 * k + 1) for k in range(1, n)}
#             print(f' - Для n = {n}: {dict} ')
#             # Возвращает словарь
#             return dict
#         # Возвращает пустой словарь, так условие
#         return {}
#     except ValueError:
#         print('Вы ввели не четное число!')
#         print('Повторите ввод.')
#         return dict_comprehension()

# dict_comprehension() # Вызов функции.
# ========================================================================================================

# 3. Напишите программу, в которой пользователь будет задавать две строки, 
# а программа - определять количество вхождений одной строки в другой.
# *Пример:*
# 'Я люблю Питон!'
# 'лю'
# ========================================================================================================
# РЕШЕНИЕ:

# a = input("Введите строку: ")
# b = input("Введите искомую подстроку: ")
# count = 0
# for i in range (0, len(a) - len(b)):
#     if b == a[i:i +len(b)]:
#         count += 1
# print(f"Количество вхождений '{b}' в '{a}' --> {count}")
# -------------------------------------------------------------------------------------------------------
# my_string = 'Я люблю Питон!'
# s2 = input('Введите искомую строку: ')
# count = 0
# for i in range(len(my_string) - len(s2) + 1):
#     if my_string[i: i + len(s2)] == s2:
#         count += 1
# print(count)
# -------------------------------------------------------------------------------------------------------
# text = input('Введите первую строку: ')
# char = input('Введите значение поиска: ')
# len_char = len(char)
# i = 0
# count = 0
# while i < len(text)-1: 
#     if char.lower() == text[i:len_char+i].lower():
#         count +=1
#     i += 1
# print(count)
# ---------------------------------------------------------------------------------------------------------
# text = 'Я люблю Питон!'
# searchText = input('Введите искомую строку: ')
# # list = text.split(searchText)
# # print(len(list) - 1)
# print(text.count(searchText)) # Тоже самое, но короче. С использованием встроенной фукции .count()
# --------------------------------------------------------------------------------------------------------
