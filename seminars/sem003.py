# Урок 3. Данные, функции и модули в Python
# ===========================================================================================================
# Встроенная функция .split('') - берет строку и делит её по указанному символу в кавычках ''. 
# Если указать () - деление будет по пробелу. 
# a = 'sdf sdd hye'
# print(a.split('s')) # ['sdf', 'sdd', 'hye']
# print(a.split(' '))

# Встроенная функция ''.join() - берет строки и склеивает их по указанному символу в кавычках ''.
# a = ['sdf', 'sdd', 'hye']
# print('--'.join(a)) # sdf--sdd--hye
# ===========================================================================================================
# n = 9
# while k:=len(input('-->').split()) != n: # Пока длинна введенной строки (k) не равна (n).  
#     print('Пробуй ещё раз') 
# else:
#     print(f'Stop! k = {k}') # Stop k = False
# =========================================================================================================
# Возможность передачи не ограниченного количества аргументов функции *name_func.
# СЛОВАРИ {}. Неупорядоченные коллекции произвольных объектов с доступом по ключу

# def func(a_1, a_2, a_3, *args, **kwargs):
#     return a_1, a_2, a_3, args, kwargs

# print(func(1, 2)) # (1, 2, (), {})  - так () - обозначаются КОРТЕЖИ, а так {} словарь.
# print(func(a_1 = 2, a_2 = 3)) # (2, 3, (), {}) - передаю значение по ключу (a_1 = 2, a_2 = 3).
# print(func(1, a_3 = 3, a_2 = 2)) # (1, 2, 3, (), {})

# print(func(1, 2, 3, 'sdf', 1234, 'cv' )) # (1, 2, 3, ('sdf', 1234, 'cv'), {})
# В (*args) - передается не ограниченное количество значений ('sdf', 1234, 'cv') 
# print(func(1, 2, 3, 'sdf', 1234, 'cv', key_1 = 213, key_2 = 'xcv')) # (1, 2, 3, ('sdf', 1234, 'cv'), {'key_1': 213, 'key_2': 'xcv'})
# В (**kwargs) - передается значение по ключу.
# =========================================================================================================
# Тайп хинтинг - указание типа, подсказки для программиста (комментарии).
# def func(a_1: list[int|str]) -> dict[int, str]:
#     return a_1,
# print(func(a_1 = 123))
# ========================================================================================================
# ЗАДАЧИ:
# 1. Реализуйте алгоритм задания случайных чисел без использования встроенного генератора псевдослучайных чисел.
# --------------------------------------------------------------------------------------------------------
# import time

# seconds = time.time()
# print(seconds) # 1670150119.4741354
# seconds = seconds % 1 * 1000000 % 10
# print(seconds) # 2.3538970947265625

# --------------------------------------------------------------------------------------------------------
# import time

# def my_random(max_: int):
#     a = time.time() # Вернет количество секунд.
#     temp = round(a) % max_ # Чтобы уйти от дробной части, округляю его.
#     return temp

# print(my_random(10)) # 3 - выдаст случайное число.
# --------------------------------------------------------------------------------------------------------
# РЕШЕНИЕ через функции
# def randomizer(x):
#     while x > 1:
#         fun = 7 * x + 4 # Можно подставить за место x секунды и получать каждый раз рандомное число.
#         x -= 1
#         print(fun % 10, end= ' ')
#     else:
#         print(5 * x + 2)

# kolvo = int(input('Введите количество чисел: '))
# randomizer(kolvo)
# ---------------------------------------------------------------------------------------------------------
# def func():
#     try:
#        list_1 = []
#        a = 1
#        b = int(input('Введите количество элементов в списке: '))
#        while a < b:
#             n = int(input('Введите магическое число:'))
#             if n != 0 or type(n) == [int]:
#                 list_1.append(round((a / n) * 10))
#                 a += 1
#                 return list_1
#     except ValueError:
#         print("На ноль делить нельзя! или число вещественное")
#     return func()

# print(func())

# ========================================================================================================
# 2. Задайте список. Напишите программу, которая определит, присутствует ли в заданном списке строк некое число.
# ['sd13', 'fds66', '34']
# Пример:
# "3" -> 'sd13', '34'
# --------------------------------------------------------------------------------------------------------

# def in_list(list_, find_): # Ищет переменнут find_ в строке list_
#     result = False
#     for i in list_:
#         if find_ in i: # Если find_ совпадает с проверяемым i.  
#             result = True
#             print(i)
#     return result

# def find_idx(list_, find_):
#     for i in range(len(list_)):
#         if list_[i].find(find_) > -1:
#             print(list_[i])
#         else:
#             print('none')

# my_list = ['sd13', 'fds66', '34']
# print(in_list(my_list, 's'))
# # find_idx(my_list, '34')
# ------------------------------------------------------------------------------------------------------


# ========================================================================================================
# 3. Напишите программу, которая определит позицию второго вхождения строки в списке либо сообщит, что её нет.
# *Пример:*
# - список: ["qwe", "asd", "zxc", "qwe", "ertqwe"], ищем: "qwe", ответ: 3
# - список: ["йцу", "фыв", "ячс", "цук", "йцукен", "йцу"], ищем: "йцу", ответ: 5
# - список: ["йцу", "фыв", "ячс", "цук", "йцукен"], ищем: "йцу", ответ: -1
# - список: ["123", "234", 123, "567"], ищем: "123", ответ: -1
# - список: [], ищем: "123", ответ: -1
# --------------------------------------------------------------------------------------------------------

# def func_1():
#     list_a = ["qwe", "asd", "zxc", "qwe", "ertqwe"]
#     find_char = "qwe"
#     new_list = []
#     for i in range(len(list_a)):
#         if find_char == list_a[i]:
#             new_list.append(i)
    
#     if len(new_list) <= 1:
#         return -1
#     return new_list[1]

# print(func_1())
# --------------------------------------------------------------------------------------------------------
# list = ["qwe", "asd", "zxc", "qwe", "ertqwe"]
# string = "asd"
# count = 0
# for i in range(len(list)):
#     if list[i] == string:
#         count += 1
#     if count == 2:
#         print(f' - list {list}, finding: {string}, ansver: {i}')
#         break
# else:
#     print(False)
# -------------------------------------------------------------------------------------------------

# def fun(): # Ищет позицию второго вхождения строки в списке либо сообщит, что её нет.
#     list = ["qwe", "asd", "zxc", "qwe", "ertqwe"]
#     a = input('Введите искомую строку: ')
#     count = 0
#     for k in range(len(list)):
#         if list[k] == a:
#             count += 1
#             if count == 2:
#                 return k
#     return -1

# print(fun())
# -------------------------------------------------------------------------------------------------------
# =======================================================================================================
# def func(arg_list: list):
#     print(arg_list)


# func([123, 123])
# ====================================================================================================
# Устройство памяти в Python

# a = [1, 2, 3]
# b = a
# b = a.append(4)
# print(b)

# def func(a = []): # Работаю каждый раз с одним и темже списком, поэтому он растет.
#     a.append(1)
#     print(a)

# func() # [1]
# func() # [1, 1]
# func() # [1, 1, 1]
# func() # [1, 1, 1, 1]
# func() # [1, 1, 1, 1, 1]

# def func(a = None): # Список создается каждый раз новый.
#     if a is None:
#         a = [2, 1]
#         a.append(1)
#         print(a)

# func() # [2, 1, 1]
# func() # [2, 1, 1]
