# Урок 5. 
# Ускоренная обработка данных: lambda, filter, map, zip, enumerate, list comprehension
# ==================================================================================================
# lambda - анонимная функция, применяется, когда нужно выполнить 1 выражение.
# list Comprehension - Нужны чтобы получить список, колекцию или словарь.
# Пример:
# Структура list Comprehension:
# Что сделать (если просто i - зачит добавит таким каким он есть, тут же можно умножение, сложение и т.д.)
# ---------------------------------------------------------------------------------------------------------
# Что сделать, С каким элементом, При каком условии.
# [i for i in range(1, 11)]
# a = [i for i in range(1, 11)] # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# a = [(i * 10) for i in range(1, 11)] # [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
# a = [(i + 0.5) for i in range(1, 11) if i > 5] # [6.5, 7.5, 8.5, 9.5, 10.5]
# print(a) 
# -------------------------------------------------------------------------------------------------------
# map - это функция, которая пробразовывает объект и возвращает его.
# my_list = ['12', '42', '523']
# print(map(int, my_list)) # map object - его нужно преобразовать в list, tuple, set.
# print(list(map(int, my_list))) # [12, 42, 523] список
# print(tuple(map(int, my_list))) # (12, 42, 523) кортеж
# print(set(map(int, my_list))) # {42, 523, 12} множество
# -------------------------------------------------------------------------------------------------------
# filter - функция, может регулировать количество элементов.
# my_list = ['12', '42', '523']
# print(filter(int, my_list)) # filter object - его нужно преобразовать в list, tuple, set.
# print(list(filter(lambda x: int(x) > 30, my_list))) # ['42', '523'] список
# print(tuple(filter(lambda x: int(x) < 100, my_list))) # ('12', '42') кортеж
# print(set(filter(lambda x: int(x) != 42, my_list))) # {'12', '523'} множество
# -------------------------------------------------------------------------------------------------------
# zip - принимает сколько угодно списков, сопоставляет, возвращает кортеж.
# -----------------------------------------------------------------------------------------------------
# enumerate - из набора элементов, который ему передаем, составляет кортежи (каждому элементу индекс).
# =======================================================================================================
# ЗАДАЧИ:
# Задача 1. Напишите программу, удаляющую из текста все слова, содержащие "абв".
# Пример: 
# 'Я люблю Джавуабв абви Питон'
# 'Я люблю Питон'
# ====================================================================================================
# my_str = 'Я люблю Джавуабв абви Питон'
# # print(my_str.replace('абв', '')) # Заменяю абв ничем. # Я люблю Джаву и Питон

# lst = my_str.split(' ')

# my_list = []
# for i in lst:
#     if 'абв' not in i:
#         my_list.append(i)
# print(my_list) # ['Я', 'люблю', 'Питон']
# -----------------------------------------------------------------------------------------------------
# РЕШЕНИЕ при помощи list comprehension: ==============================================================
# my_str = 'Я люблю Джавуабв абви Питон'
# lst = my_str.split(' ')
# my_list = [i for i in lst if 'абв' not in i] # 49 строка (i), 47 строка + 48 строка.
# print(*my_list) # Я люблю Питон  # * - распокует.
# ---------------------------------------------------------------------------------------------------
# text = 'Я люблю Джавуабв абви Питон'
# search = 'абв'
# text_split = text.split()
# new_text = ''
# for i in text_split:
#     if search in i:
#         text_split.remove(i)
#     else:
#         new_text += i +' '
# print(new_text) # Я люблю Питон
# ------------------------------------------------------------------------------------------------
# new_text1 = [ i for i in text_split if search not in i]
# print(*new_text1) # Я люблю Питон
# -------------------------------------------------------------------------------------------------
# strText = 'Я люблю Джавуабв абви Питон'
# print(' '.join([i for i in strText.split(' ') if 'абв' not in i]))
# -----------------------------------------------------------------------------------------------
# my_str = 'Я люблю Джавуабв абви Питон'
# filtered_list = list(filter(lambda word: 'абв' not in word, my_str.split()))
# print(*filtered_list) # Я люблю Питон
# =================================================================================================
# Задача 2. В файле находится N натуральных чисел, записанных через пробел.
# Среди чисел не хватает одного, чтобы выполнялось условие A[i] - 1 = A[i-1]. 
# Найдите это число.
# 5 6 7 8 9 
# 5 6 7 9 - нужно найти 8.
# ========================================================================================================
# path = '/Users/User/Desktop/Python_Language/seminars/file_sem005.txt'

# with open( path, 'r') as data:
#     my_str = data.readline()
# print(my_str) # 5 6 7 9

# my_lst = my_str.split()
# print(my_lst) # ['5', '6', '7', '9']

# lst = []
# for i in range(1, len(my_lst) - 1):
#     my_lst[i] = int(my_lst[i])
#     if int(my_lst[i]) + 1 != int(my_lst[i + 1]):
#         lst.append(my_lst[i] + 1)

# print(lst) # [8]
# ----------------------------------------------------------------------------------------------------
# path = '/Users/User/Desktop/Python_Language/seminars/file_sem005.txt'
# my_str = '5 6 8 9'
# with open (path, 'w') as data:
#     data.write(my_str)

# with open (path, 'r') as data:
#     # data.readline()
#     lst = my_str.split()
#     for i in range(1, len(lst)):
#         if (int(lst[i]) - 1) != (int((lst[i - 1]))):
#             print(int(lst[i]) - 1) # 7

# with open (path, 'a') as data:
#     data.write()
# =====================================================================================================
# Задача 3. Дан список чисел. Создайте список, в который попадают числа, описываемые
# возрастающую последовательность. Порядок элементов менять нельзя.
# *Пример:*
# [1, 5, 2, 3, 4, 6, 1, 7] => [1, 5, 6, 7] и т.д.
# ========================================================================================================
# my_lst = [1, 5, 2, 3, 4, 6, 1, 7]
# new_lst = [my_lst[0]]
# for i in range(1, len(my_lst)):
#     if my_lst[i] > new_lst[- 1]:
#         new_lst.append(my_lst[i])
# print(new_lst) # [1, 5, 6, 7]
# ----------------------------------------------------------------------------------------------------
