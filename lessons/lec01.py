# Урок 1. Знакомство с языком програм. Python.
# Темы:
# Как настроить окружение
# Переменные в Python: не менять тип в процессе
# Операторы ввода и вывода данных 
# Арифметические операции и проблемы
# Условный оператор и его вариации
# Цикл while и вариации while-else
# Цикл for, range
# Вложенные циклы
# Строки, списки
# ============================================================================================================
# Типы данных и переменные:
# int, float, boolean, str, list, None
# ============================================================================================================
# print('Hello world')
# ---------------------------------------------------------------------------------------------------------
# В Python нельзя создавать переменную без присваивания ей значения сразу.
# Можно писать так:
# value = None 
# Если ОЧЕНЬ нужно объявить переменную сразу, а потом использовать её дальше по коду, но лучше так не делать.
# print(type(value)) # <class 'NoneType'>

# a = 123  # Объявление переменной.
# b = 1.23 
# print(a)
# print(b)
# print(type(a)) # <class 'int'>
# print(type(b)) # <class 'float'>
# Чтобы узнать какой тип данных у переменной, нужно написать print(type(переменная))

# value = 12334
# print(value)       # 12334
# print(type(value)) # <class 'int'>

s = 'hello world' # Объявление переменной s и присваивание строкового значения (string).
# print(s) # hello world

# print(type(s)) # <class 'str'>
# s = "hello 'world" # Если нужно внутри строки использовать одинарную кавычку (') пишу ("'")
# print(s)
# s = 'hello "world' # Если нужно вывести двойные ковычки (") пишу ('"')
# print(s)
# s = 'hello \'world' # Если нужно вывести одинарную ковычку (') пишу (\')
# print(s)
# s = 'hello \nworld' # Если нужно перенести на следующую строку, пишу (\n)
# print(s)

# print(a, b, s) # Если нужно вывести разом все переменные.
# print(a, '-', b, '-', s) # Если нужно вывести прочерк (-)
# print('{} - {} - {}'.format(a, b, s)) # Тоже самое, но через .format()
# print('{1} - {2} - {0}'.format(a, b, s)) # Так можно поменять порядок вывода переменных.
# print(f'{a} - {b} - {s}') # Тоже самое через интерполяцию.

# f = True # или False
# print(f) # Вывод логической переменной
# print(type(f)) # <class 'bool'>
# -----------------------------------------------------------------------------------------------------------
# В Python нет понятия массивов, заменяют это списки (list)

# list = [] # Объявляю пустой список (list), присваиваю значение (x = [])
# print(list) # Вывожу значение переменной
# print(type(list)) # <class 'list'>

# list = [1, 2, 3]
# print(list)
# list = ['1', '2', '3', 'hello', 1,2,4.5, True] # Список строк.
# # !Так делать не нужно, нужно делать хранилище с одним типом данных!
# print(list)

# list = ['1', '2', '3'] # Список строк.
#  col = ['hello', 1,2,4.5, True] # Пробел перед col или print поломает программу!!!
# print(list)
# print(col)
# -----------------------------------------------------------------------------------------------------------
# Ввод (считывание данных) и вывод данных
# input, print
# ============================================================================================================
# print('Введите a');
# # a = input()
# # a = int(input()) # Чтобы получить не string, а integer (целое число).
# a = float(input()) # Чтобы получить вещественное значение
# print('Введите b');
# # b = input()
# # b = int(input())
# b = float(input())
# # print(a, b)
# print(a, ' + ', b, ' = ', a+b) # Чтобы складывать не строки, а числа, нужно явно прописать тип данных (int или float).
# print(type(a)) # <class 'str'>
# print(type(b)) # <class 'str'>
# При выводе можно производить математические действия. 
# Но в данном случае это строки сложение будет строковое. # 10  +  20  =  1020

# print('{} {}'.format(a, b))
# print(f'{a} {b}')
# ---------------------------------------------------------------------------------------------------------
# Арифметические операции.
# +, -, *, /, %, //, **
# Приоритет операций
# **, ⊕, ⊖, *, /, //, %, +, - 
# ⊕ - унарный плюс
# ⊖ - унарный минус
# ( ) Скобки меняют приоритет
# ============================================================================================================
# a = +123 # +123 - это унарный плюс, обычно не пишут.
# b = -321 # Это и есть унарный минус (инверсия числа).

# a = 2
# b = 8
# # c = a + b  # = 10
# # c = a - b  # = -6
# # c = a * b  # = 16
# # c = a / b    # = 0.25 
# c = a // b   # = 0   # Пишу // если нужно получить целое число.
# print(c)

# a = 12
# b = 8
# c = a % b   # = 4 - Это остаток от деления.
# print(c)

# a = 2
# b = 8
# c = a ** b # = 256 (иначе 2*2*2*2*2*2*2*2)
# print(c)
# ----------------------------------------------------------------------------------------------------------
# ОСОБЕННОСТЬ языка Python - нет строго выделенного места, для хранения числа, как было в C# (32бита).
# Пример:
# a = 2
# b = 800
# c = a ** b
# print(c) # = 6668014432879854274079851790721257797144758322315908160396257811764037237817632071521432200871554290742929910593433240445888801654119365080363356052330830046095157579514014558463078285911814024728965016135886601981690748037476461291163877376
# -----------------------------------------------------------------------------------------------------------
# a = 1.3
# b = 3
# c = a * b # = 3.9000000000000004 - Это ОСОБЕННОСТЬ Python
# # КАК этого избежать?
# # ------------------------------------------------------------------------------------------------------------
# # c = round(a * b) # = 4  Если нужно перемножить не целое число, а получить целое.

# a = 1.3123
# b = 3
# c = round(a * b, 3) # Если нужно указать после запятой аргумент (количество знаков).
# print(c)
# ------------------------------------------------------------------------------------------------------------
# Операция присваивания.
# a = 3
# # a = a + 5 # Чтобы так длинно не писать, пишу
# a += 5 # Так же для всех других арифметический операций.
# print(a) # = 8
# ------------------------------------------------------------------------------------------------------------
# Логические операции
# >, >=, <, <=, ==, !=
# not, and, or, - не путать с &, |, ^
# is, is not, in, not in
# gen
# ============================================================================================================
# a = 1 > 4           # = False
# a = 1 < 4           # = True
# a = 1 < 4 and 5 > 2 # True
# a = 1 == 2          # False
# a = 1 != 2          # True
# print(a)
# a = 'qwe' # Сравниение строк
# b = 'qwe'
# print(a == b) # = True

# a = [1, 2] # Сравнение списков (эелементы будут сравниваться по длинне списка)
# b = [1, 2]
# print(a == b) # = True
# -----------------------------------------------------------------------------------------------------------
# Можно использовать тройные неравенства
# a = 1 < 3 < 5 # = True
# a = 1 < 3 < 5 < 10 # И четверные неравенства # = True
# print(a)
# ----------------------------------------------------------------------------------------------------------
# func = 1
# T = 4
# x = 123
# print(func < T > x) # И так можно писать тройные неравенства # = False
# print(func < T (x)) # Если x = 2 # = True
# -----------------------------------------------------------------------------------------------------------
# f = 1 > 2 or 4 < 6 # Логические операции
# print(f) # = True  - Потому, что дизьюнкцией двух высказываний, называется высказывание ИСТИНА тогда и только 
# тогда, когда хотябы одно из высказываний истина!
# f = [1, 2, 3, 4]
# print(f) # = [1, 2, 3, 4]
# print(2 in f) # = True - т.к. 2 в списке содержится.
# print(not 2 in f) # = False
# ------------------------------------------------------------------------------------------------------------
# f = [1, 2, 3, 4]
# # is_odd = f[0] % 2 == 0 # Если нужно проверить факт четности конкретного числа.
# is_odd = not f[0] % 2 # Так принято писать в Python, т.к по умолчанию 0 - это False, а 1 - True
# print(is_odd) # = False
# ---------------------------------------------------------------------------------------------------------
# Управляющие конструкции
# ===========================================================================================================
# if, if-else
# ---------------------------------------------------------------------------------------------------------
# if condition:
#     # operator 1
#     # operator 2
#     # ...
#     # operator n
# else:
#     # operator n + 1
#     # operator n + 2
#     # ...
#     # operator n + m
# ---------------------------------------------------------------------------------------------------------
# Пример нахождения максимума из двух чисел:
# a = int(input('a = ')) # Приглашение, для ввода данных
# b = int(input('b = '))
# if a > b:
#     print(a)
# else:
#     print(b)
# ------------------------------------------------------------------------------------------------------------
# if condition1:
#     # operator
# elif condition2:
#     # operator
# elif condition3:
#     # operator
# else:
#     # operator
# ------------------------------------------------------------------------------------------------------------
# Пример:
# username = input('Введите имя: ')
# if username == 'Паша':
#     print('Ура, это же ПАША!')
# elif username == 'Марина':
#     print('Я так ждал Вас, Марина!')
# elif username == 'Ильнар':
#     print('Ильнар - топ)')
# else:
#     print('Привет, ', username)
# -----------------------------------------------------------------------------------------------------------
# Управляющие конструкции (циклы)
# while
# ----------------------------------------------------------------------------------------------------------
# while condition:
#     # operator 1
#     # operator 2
#     # ...
#     # operator n
# -----------------------------------------------------------------------------------------------------------
# Пример как сделать инвертированное число (было 23 - станет 32)
# original = 23
# inverted = 0
# while original != 0:
#     inverted = inverted * 10 + (original % 10)
#     original //= 10 # Целочисленное деление на 10
# print(inverted) # = 32
# -----------------------------------------------------------------------------------------------------------
# У цикла while есть блок else, он выполняется в том случае, когда основное тело цикла перестает работать.
# -----------------------------------------------------------------------------------------------------------
# while condition:
#     # operator 1
#     # operator 2
#     # ...
#     # operator n
# else:
#     # operator n + 1
#     # operator n + 2
#     # ...
#     # operator n + m
# ------------------------------------------------------------------------------------------------------------
# Пример:
# original = 23
# inverted = 0
# while original != 0:
#     inverted = inverted * 10 + (original % 10)
#     original //= 10 
#     # print(original)
# else:
#     print('Пожалуй')   # = Пожалуй
#     print('хватит ;)') # = хватит ;)
# print(inverted)        # = 32
# ------------------------------------------------------------------------------------------------------------
# Управляющие конструкции
# for
# ------------------------------------------------------------------------------------------------------------
# for i in enumeration: # enumeration - это итерируемый объект (по нему будет бежать цикл)
#     # operator 1
#     # operator 2
#     # ...
#     # operator n
# -----------------------------------------------------------------------------------------------------------
# Пример:
# for i in 1, 2, 3, 4, 5:
#     print(i**2)
# Вывод 1:
# 1
# 4
# 9
# 16
# 25

# list = [1,2,3,4,10,5]
# for i in list: # Итерируемый объект список.
#     print(i)
# Вывод 2:
# 1
# 2
# 3
# 4
# 10
# 5

# r = range(5) # range() - перечислит числа от 0 до указанного индекса элемента в ()
# for i in r:
#     print(i)

# for i in range(5): # тоже самое, но короче
#     print(i)
# Вывод 3:
# 0
# 1
# 2
# 3
# 4

# for i in range(1, 10, 2): # Начнет с индекса 1 с шагом 2
#     print(i)
# Вывод 4:
# 1
# 3
# 5
# 7
# 9

# for i in 'qwerty': # Можно указывать строки
# # for i in 'qwe - rty':
#     print(i) # Получу по буквенную разбивку.
# ------------------------------------------------------------------------------------------------
# Немного о строках:
# ============================================================================================================
# text = 'съешь ещё этих мягких французских булок'
# print(len(text))                 #  = 39 - количество символов. len() - длинна
# print('ещё' in text)             # = True - если в тексте есть слово (ещё)
# print(text.isdigit())            # = False  
# text.isdigit() - даст ответ являются ли все символы в строке (text) числами?
# print(text.islower())            # = True 
# text.islower() - даст ответ являются ли все символы нижнего регистра?
# print(text.replace('ещё','ЕЩЁ')) # = съешь ЕЩЁ этих мягких французских булок
# text.replace(к, Я) - если хочу заменить одно на другое

# for c in text:
#     print(c) # = Распечатает каждый элемент строки с новой строки.
# ------------------------------------------------------------------------------------------------------------
# Как узнать, что делает та или иная встроенная функция?
# Пишу 
# help(text.istitle) # = ПОЛУЧУ встроенную справку языка Python по istitle() method
# help(int) # = ПОЛУЧУ встроенную справку по object типо integer
# ------------------------------------------------------------------------------------------------------------
# СРЕЗУ:
# ============================================================================================================
# text = 'съешь ещё этих мягких французских булок' # Это массив символов, значит я могу обращаться к конкретным
# элементам массива по индексу.
# print(text[0])             # = c - первый элемент.
# print(text[1])             # = ъ - второй элем.
# print(text[len(text)])     # = IndexError - ошибка, т.к. индексация идет с нуля!
# print(text[len(text)-1])   # = к
# print(text[-5])            # = б - т.к. с конца будет считать.
# print(text[:]) # = print(text)  - за место : будет подставленно [0:len(text)-1], т.е. от первого до последнего
# print(text[:2])            # = съ - возмет от 0 элемента до второго.
# print(text[len(text)-2:])  #  = ок
# print(text[2:9])           # = ешь ещё
# print(text[6:-18])         #  = ещё этих мягких
# print(text[0:len(text):6]) # = сеикакл
# print(text[::6])           # = сеикакл
# text = text[2:9] + text[-5] + text[:2] # ...
# print(text)
# ----------------------------------------------------------------------------------------------------------
# СПИСКИ: введение
# Список - это пронумерованная, изменяемая коллекция объектов не произвольных типов.
# ============================================================================================================
# Примеры:
# numbers = [1, 2, 3, 4, 5]
# print(numbers) # = [1, 2, 3, 4, 5]
# ran = range(1,6)
# print(type(ran))     # = <class 'range'>
# numbers = list(ran)  # Приведение типа данных range к типу данных list (список).
# print(type(numbers)) # = <class 'list'>
# -------------------------------------------------------------------------------------------------------
# numbers = list(range(1, 6))  # Так короче код.
# print(numbers)               # = [1, 2, 3, 4, 5]
# numbers[0] = 10              # Нулевой элемент списка будет = 10
# print(f'{len(numbers)} len') # Чтобы получить количество элементов. # = 5 len
# # Пользуюсь интерполяцией f'{}', чтобы видеть само действие.
# print(numbers)               # = [10, 2, 3, 4, 5]
# for i in numbers:            # Цикл
#     i *= 2                   # Тут я кладу в текущую переменную новое значение, не в сам список.
#     print(i)                 # = Выдаст каждый элем. списка с новой строки * 2.
# print(numbers)               # = [10, 2, 3, 4, 5] - но сам список выдаст изначальный.
# ----------------------------------------------------------------------------------------------------------
# Расширенный функционал работы со списками.
# -----------------------------------------------------------------------------------------------------------
# colors = ['red', 'green', 'blue']
# for e in colors:
#  print(e)               # = Выдаст каждый эл.списка с новой строки.
# for e in colors:
#  print(e*2)             # = redred greengreen blueblue
# colors.append('gray') 
# # .append() добавить в конец списка colors элемент gray
# print(colors == ['red', 'green', 'blue', 'gray']) # = True
# colors.remove('red') # или пишу - del colors[0] 
# # .remove() удалить элемент red из списка colors
# -----------------------------------------------------------------------------------------------------------
# Функции в Python
# ============================================================================================================
# def function_name(x):
#     # body line 1
#     # ...
#     # body line n 
#     # optional return
# ------------------------------------------------------------------------------------------------------------
# Примеры:
# def f(x):
#     return x**2
# -----------------------------------------------------------------------------------------------------------
def f(x):
    if x == 1:
        return 'Целое'
    elif x == 2.3:
        return 23
    else:
        return
# arg = 1
# print(f(arg))
# print(type(f(arg)))

# Вывод 1:  arg = 1
# Целое
# <class 'str'>

# Вывод 2:  arg = 2.3
# 23
# <class 'int'>

# Вывод 3:  arg = 2
# None
# <class 'NoneType'> # т.к. в теле функции нет действий с числом 2.
# -----------------------------------------------------------------------------------------------------------