# Урок 1. Знакомство с языком програм. Python.
# Типы данных и переменные:
# int, float, boolean, str, list, None

# print('Hello world')

# value = None # Если очень нужно объявить переменную сразу, а потом использовать её дальше по коду, но лучше так не делать.
# print(type(value))

# a = 123 # int
# b = 1.23 # float
# print(type(a))
# print(type(b))

# value = 12334
# print(type(value))

# s = 'hello world' # Объявление переменной s и присваивание сторокового значения.
# print(s) # Вывод строки
# s = "hello 'world" # Если нужно внутри строки использовать одинарную кавычку (') пишу ("'")
# print(s)
# s = 'hello "world' # Если нужно вывести двойные ковычки (") пишу ('"')
# print(s)
# s = 'hello \'world' # Если нужно вывести одинарную ковычку (') пишу (\')
# print(s)
# s = 'hello \nworld' # Если нужно перенести на следующую строку, пишу (\n)
# print(s)

# print(a, b, s) # Если нужно вывести разом все переменные
# print(a, '-', b, '-', s) # Если нужно вывести прочерк (-)
# print('{} - {} - {}'.format(a, b, s)) # Тоже самое
# print('{1} - {2} - {0}'.format(a, b, s)) # Так можно поменять порядок вывода переменных
# print(f'{a} - {b} - {s}') # Тоже самое через интерполяцию

# f = True # или False
# print(f) # Вывод логической переменной


# Вывод 1:
# 123
# 1.23

# В Python нельзя заводить переменную без присвоения её значения сразу.
# к примеру так value
# Можно писать так value = None

# Вывод 2:
# 123
# 1.23
# 12334

# Чтобы узнать какой тип данных у переменной, нужно написать print(type(переменная))

# Вывод 3:
# <class 'int'>
# <class 'float'>
# <class 'int'>

# Вывод 4:
# <class 'NoneType'>  - Если очень нужно объявить переменную сразу, а потом использовать её дальше по коду, но лучше так не делать.
# <class 'int'>
# <class 'float'>
# <class 'int'>

# Вывод 5:
# <class 'NoneType'>
# <class 'int'>
# <class 'float'>
# <class 'int'>
# hello world
# hello 'world
# hello "world

# Вывод 6:
# hello world
# 123 1.23 hello world

# Вывод 7:
# hello world
# 123 - 1.23 - hello world
# 123 - 1.23 - hello world
# 1.23 - hello world - 123
# 123 - 1.23 - hello world
# True

# ---------------------------------------------------------------------------------------------
# В Python нет понятия массивов, заменяют это списки (list)

# list = [] # Объявляю переменную (list), присваиваю значение список (x = [])
# print(list) # Вывожу значение переменной
# list = [1, 2, 3]
# print(list)
# list = ['1', '2', '3', 'hello', 1,2,4.5, True] # !Так делать не нужно, нужно делать хранилище с одним типом данных!
# print(list)

# list = ['1', '2', '3']
# col = ['hello', 1,2,4.5, True] # Пробел перед col или print поломает программу!
# print(list)
# print(col)


# Вывод 8:
# []
# [1, 2, 3]
# ['1', '2', '3', 'hello', 1, 2, 4.5, True]

# Вывод 9:
# []
# [1, 2, 3]
# ['1', '2', '3']
# ['hello', 1, 2, 4.5, True]

# -------------------------------------------------------------------------------------------
# Ввод и вывод данных
# print, input

# print('Введите a');
# a = input()
# a = int(input()) # Чтобы получить целое число.
# a = float(input()) # Чтобы получить вещественных значений
# print('Введите b');
# b = input()
# b = int(input())
# b = float(input())
# print(a, b)
# print(a, ' + ', b, ' = ', a+b)  # Если я захочу при выводе производить математические действия
# print('{} {}'.format(a, b))
# print(f'{a} {b}')

# Вывод 10:
# Введите a
# 1
# Введите b
# 2
# 1 2
# 1 2
# 1 2

# Вывод 11:
# Введите a
# 10
# Введите b
# 20
# 10  +  20  =  1020

# Вывод 12: # Чтобы получить целые значения пишу int(input())
# Введите a
# 10
# Введите b
# 20
# 10  +  20  =  30

# Вывод 13: # Чтобы получить вещественные значения пишу float(input()
# Введите a
# 1.2
# Введите b
# 4.2
# 1.2  +  4.2  =  5.4
# -----------------------------------------------------------------------------------------
# Арифметические операции

# a = 123
# b = -321
# c = a + b
# print(c)

# Вывод 1:
# 444

# Вывод 2: # c = a + b
# -198

# a = 2
# b = 8
# c = a / b # Тут меняю 
# print(c)

# Вывод 3:
# -6        # c = a - b
# 16        # c = a * b
# 0.25      # c = a / b

# a = 12
# b = 8
# c = a % b 
# print(c)

# Вывод 4: # Если мне нужно получить деление в целых числах, пишу (//)
# 1     # c = a // b

# Вывод 5:
# 4     # c = a % b 

# a = 2
# b = 8
# c = a ** b # Возведение в степень, пишу (**) 
# print(c)

# Вывод 6:
# 256   # c = a ** b 

# a = 1.31323
# b = 3
# c = round(a * b) # Если нужно перемножить не целое число, пишу round()
# # c = round(a * b, 5) # Если нужно указать после запятой определенное количество знакой.
# print(c)

# Вывод 7:
# 4          # c = round(a * b)
# Вывод 8:
# 3.93969    # c = round(a * b, 5)

# a = 3
# a += 5 # Чтобы не писать a = a + 5

# print(a)

# Вывод 9:
# 8
# ---------------------------------------------------------------------------------------
# Логические операции
# >, >=, <, <=, ==, !=
# not, and, or, - не путать с &, |, ^
# is, is not, in, not in
# gen

# a = 1 > 4
# a = 1 < 4
# a = 1 < 4 and 5 > 2
# a = 1 == 2
# a = 1 != 2
# a = 'qwe' # Сравниение строк
# b = 'qwe'
# # print(a)
# print(a == b) # Сравниение строк

# a = [1, 2] # Сравнение списков
# b = [1, 2]
# print(a == b)

# Вывод 1:
# False    # a = 1 > 4
# True     # a = 1 < 4
# True     # a = 1 < 4 and 5 > 2
# False    # a = 1 == 2
# True     # a = 1 != 2

# Вывод 2:
# True     # Сравниение строк

# Вывод 3:
# True     # Сравнение списков

# a = 1 < 3 < 5 # Можно использовать тройные неравенства
# a = 1 < 3 < 5 < 10 # И четверные неравенства
# print(a)

# Вывод 4:
# True

# Вывод 5:
# True

# func = 1
# T = 4
# x = 123
# print(func<T>x) # И так можно писать тройные неравенства

# Вывод 6:
# False

# f = 1 > 2 or 4 < 6 # Логические операции
# f = [1, 2, 3, 4]
# print(f)
# # print(2 in f)
# # print(not 2 in f)
# # is_odd = f[0] % 2 == 0 # Если нужно проверить факт четности конкретного числа
# is_odd = not f[0] % 2 # Так принято писать в Python.
# print(is_odd)

# Вывод 7:
# True

# Вывод 8:
# [1, 2, 3, 4]
# True          # print(2 in f)  True - т.к. 2 содержиться в списке.

# Вывод 9:
# [1, 2, 3, 4]
# False         # print(not 2 in f)
# False         # т.к. число (1) не четное

# Вывод 10:
# False         # т.к. число (1) не четное
# ------------------------------------------------------------------------------------------
# Управляющие конструкции
# if, if-else

# a = int(input('a = ')) # Пригложение, для ввода данных
# b = int(input('b = '))
# if a > b:
#     print(a)
# else:
#     print(b)

# Вывод 1:
# a = 1
# b = 2
# 2

# username = input('Введите имя: ')
# if username == 'Паша':
#     print('Ура, это же ПАША!')
# elif username == 'Марина':
#     print('Я так ждал Вас, Марина!')
# elif username == 'Ильнар':
#     print('Ильнар - топ)')
# else:
#     print('Привет, ', username)

# Вывод 2:
# Введите имя: Паша
# Ура, это же ПАША!
# Вывод 3:
# Введите имя: Дмитрий
# Привет,  Дмитрий
# --------------------------------------------------------------
# Управляющие конструкции
# while

# original = 23
# inverted = 0
# while original != 0:
#     inverted = inverted * 10 + (original % 10)
#     original //= 10 # Целочисленное деление на 10
# print(inverted)

# Вывод 1:
# 32

# У цикла while есть блок else, он выполняется в том случае, когда основное тело цикла перестает работать.

# original = 23
# inverted = 0
# while original != 0:
#     inverted = inverted * 10 + (original % 10)
#     original //= 10 
# else:
#     print('Пожалуй')
#     print('хватит )')
# print(inverted)

# Вывод 2:
# Пожалуй
# хватит )
# 32
# --------------------------------------------------------------
# Управляющие конструкции
# for

# for i in 1, 2, 3, 4, 5:
#     print(i**2)

# Вывод 1:
# 1
# 4
# 9
# 16
# 25

# list = [1,2,3,4,10,5]
# for i in list:
#     print(i)

# Вывод 2:
# 1
# 2
# 3
# 4
# 10
# 5

# r = range(5) # range() - перечислит числа от 0 до указанного значения в ()
# for i in r:
#     print(i)

# for i in range(5): # тоже самое, но короче
#     print(i)

# Вывод 3:
# 0
# 1
# 2
# 3
# 4

# for i in range(1, 10, 2): # Начнет с 1 с шагом 2
#     print(i)

# Вывод 4:
# 1
# 3
# 5
# 7
# 9

# for i in 'qwerty': # Можно указывать строки
# for i in 'qwe - rty':
#     print(i)

# Вывод 5:
# q
# w
# e
# r
# t
# y

# Вывод 6:
# q
# w
# e

# -

# r
# t
# y
# ------------------------------------------------------------------------------------------------
# Немного о строках:

# text = 'съешь ещё этих мягких французских булок'
# print(len(text)) # 39 - количество символов
# print('ещё' in text) # True - есть ли в тексте слово (ещё)
# print(text.isdigit()) # False - проверка являются ли все символы в строке числами?
# print(text.islower()) # True - являются ли все символы нижнего регистра?
# print(text.replace('ещё','ЕЩЁ')) # - если хочу заменить одно на другое
# for c in text:
#     print(c)

# text = 'съешь ещё этих мягких французских булок' # Это массив символов, значит я могу обращаться к конкретным элементам массива по индексу.
# print(text[0]) # c - первый элемент.
# print(text[1]) # ъ - второй элем.
# print(text[len(text)]) # IndexError - ошибка, так писать нельзя.
# print(text[len(text)-1]) # к
# print(text[-5]) # б - т.к. в конца будет считать.
# print(text[:]) # print(text)  - за место : будет подставленно [0:len(text)-1]
# print(text[:2]) # съ - возмет от 0 элемента до второго.
# print(text[len(text)-2:]) # ок
# print(text[2:9]) # ешь ещё
# print(text[6:-18]) # ещё этих мягких
# print(text[0:len(text):6]) # сеикакл
# print(text[::6]) # сеикакл
# text = text[2:9] + text[-5] + text[:2] # ...
# print(text)

# numbers = [1, 2, 3, 4, 5]
# print(numbers) # [1, 2, 3, 4, 5]
# ran = range(1,6)
# print(type(ran)) 
# numbers = list(ran) # Приведение типа данных range к типу данных list (список).
# print(type(numbers))

# # numbers = list(range(1, 6))
# print(numbers) # [1, 2, 3, 4, 5]
# numbers[0] = 10
# print(f'{len(numbers)} len') # Чтобы получить количество элементов. Пользуюсь интеполяцией, чтобы видеть само действие.
# print(numbers) # [10, 2, 3, 4, 5]
# for i in numbers:
#     i *= 2  # Тут я кладу в текущую переменную новое значение, не в сам список.
#     print(i) # [20, 4, 6, 8, 10]
# print(numbers) # [10, 2, 3, 4, 5]

# Вывод 1:
# [1, 2, 3, 4, 5]
# <class 'range'>  # Изначально тип данных range 
# <class 'list'>   # После приведения, тип данных list
# [1, 2, 3, 4, 5]
# [10, 2, 3, 4, 5]
# 20
# 4
# 6
# 8
# 10
# [10, 2, 3, 4, 5]

# Вывод 2:
# [1, 2, 3, 4, 5]
# <class 'range'>
# <class 'list'>
# [1, 2, 3, 4, 5]
# 5 len  # Вижу, что в списке 5 элементов.
# [10, 2, 3, 4, 5]
# 20
# 4
# 6
# 8
# 10
# [10, 2, 3, 4, 5]

# Расширенный функционал работы со списками.

# colors = ['red', 'green', 'blue']
# for e in colors:
#  print(e) # red green blue
# for e in colors:
#  print(e*2) # redred greengreen blueblue
# colors.append('gray') # добавить в конец
# print(colors == ['red', 'green', 'blue', 'gray']) # True
# colors.remove('red') # или пишу - del colors[0] # удалить элемент

# -----------------------------------------------------------------------------------
# Функции в Python

# def f(x):
#     return x**2

def f(x):
    if x == 1:
        return 'Целое'
    elif x == 2.3:
        return 23
    else:
        return
arg = 2
print(f(arg))
print(type(f(arg)))

# Вывод 1:  arg = 1
# Целое
# <class 'str'>

# Вывод 2:  arg = 2.3
# 23
# <class 'int'>

# Вывод 3:  arg = 2
# None
# <class 'NoneType'>