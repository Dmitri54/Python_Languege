# Урок 2. Знакомство с языком програм. Python.
# Данные, функции и модули в Python.
# -------------------------------------------------------------------------------------------------
# ФАЙЛЫ:
# Хранение данных;
# Передача данных в клиент-серверных проектах;
# Хранение конфигов;
# Логирование действий.
# -------------------------------------------------------------------------------------------------
# Как работать с файлами:
# Связать файловую перемемнную с файлом, определив режим работы (модификатор работы).
# a - открытие для добавления данных.
# r - открытие для чтения данных.
# w - открытие для записи данных.
# w+, r+

# colors = ['red', 'green', 'blue123'] # В качестве данных выступает список
# data = open('file.txt', 'a') # Создал переменную и связываю её с текстовым файлом. И указываю мод a - до запись
# data.writelines(colors) # разделетилей не будет
# data.write('\nLINE 12 \n')
# data.write('LINE 13\n')
# data.close() # Закроет подключение к файлу.

# with open('file.txt', 'а') as data: # Ещё одна конструкция, для записи данных с фаил
#     data.write('line 1111\n')
#     data.write('line 22222\n')
# В данном случае писать data.close() не нужно.

# exit() # Позволяет отключить код находящийся ниже.
# path = 'file.txt'
# data = open(path, 'r') # Открою в режиме чтения 
# for line in data:
#     print(line)
# data.close()
# --------------------------------------------------------------------------------------------------
# Функции и модули.
# ----------------------------------------------------------------------------------------------------
# import lec01
# print(lec01.f(1))

# import lec01 as l # Чтобы не писать каждый раз название файла, можно придумать сокращение и использовать его далее по коду.
# print(l.f(1))
# ---------------------------------------------------------------------------------------------------
# Значения по умолчанию, для функции.
# def new_string(symbol, count):
#     return symbol * count
# print(new_string('!', 5)) # !!!!!
# print(new_string('!'))    # TypeError missiong 1 requered ...

# def new_string(symbol, count = 3):
#     return symbol * count
# print(new_string('!', 5)) # !!!!!
# print(new_string('!'))    # !!!
# print(new_string(4))      # 12 - т.к. Python распознает тип данных в момент вызова функции. В данном случае будет произведено умножение. 
# # ---------------------------------------------------------------------------------------------------
# # Возможность передачи не ограниченного количества аргументов функции.
# def concatenatio(*params):
#     res: str = "" # тут можно заменить тип данных на int (res: int = 0) и работать с числами.
#     for item in params:
#         res += item
#     return res
# print(concatenatio('a', 's', 'd', 'w')) # asdw
# print(concatenatio('a', '1', 'd', '2')) # a1d2
# print(concatenatio('1', '2', '3', '4')) # TypeError: ... т.к. с данном примере я работаю со строками, а не счислами. # равно 10.
# ---------------------------------------------------------------------------------------------------
# РЕКУРСИЯ
# def fib(n):
#     if n in [1, 2]:
#         return 1
#     else:
#         return fib(n - 1) + fib(n - 2)
# list = []
# for e in range(1, 10):
#     list.append(fib(e))
# print(list) # 1 1 2 3 5 8 13 21 34
# ---------------------------------------------------------------------------------------------------
# КОРТЕЖИ - это неизменяемый "список"
# (a) = (3, 1, 41, 4)
# # a = (3,) - так можно.
# # a = (3) Ошибка, это не кортеж. 
# print(a)
# print(a[0])
# print(a[-1])
# print(a[-2])
# # a[0] = 12 Ошибка, присваивание координатам делать нельзя.

# a = (3, 4, 5)
# for item in a:
#     print(item)
# Вывод:
# 3
# 4
# 5
# Ещё пример:
# t = tuple(['red', 'green', 'blue'])
# print(t[0]) # red
# print(t[2]) # green
# # print(t[10]) # IndexError: tuple index out of range
# print(t[-2]) # green
# # print(t[-200]) # IndexError: tuple index out of range

# for e in t: 
#     print(e) # red green blue

# t[0] = 'black' # TypeError: 'tuple' object does not support item assignment
# Можно распоковать КОРТЕЖ в отдельные переменные
# t = tuple(['red', 'green', 'blue']) # Создал список, конвертирую его в КОРТЕЖ
# red, green, blue = t # Распоковываю его и превращаю в три не зависимые переменные
# print('r:{} g:{} b:{}' .format(red, green, blue)) # r:red g:green b:blue
# -------------------------------------------------------------------------------------------------
# СЛОВАРИ 
# Неупорядоченные коллекции произвольных объектов с доступом по ключу
# dictionary = {} # Создание пустово словаря
# dictionary = \
#     {
#         'up': '↑', # Ключ
#         'left': '←',
#         'down': '↓',
#         'right': '→'
#     } # Пишу \ чтобы писать код с новой строки, а не в одну строчку.

# print(  dictionary['up'])# Чтобы заменить значение
# dictionary['up'] = 'fl'
# print(  dictionary['up'])
# # print(dictionary) # {'up':'↑', 'left': '←', 'down': '↓', 'right': '→'}
# # print(dictionary['left']) # ←  
# # типы ключей могут отличаться

# for k in dictionary.keys(): # Так можно получить все ключи.
#     print(k)
# Вывод (ключи): 
# up
# left
# down
# right
# for k in dictionary.values(): # Так можно получить все значения
#     print(k)
# Вывод (значения):
# ↑
# ←
# ↓
# →
# for v in dictionary: # Чтобы пробежать по всем элементам словаря 
#     print(v) # Выдаст ключи
#     print(dictionary[v]) # Выдаст только значения
# --------------------------------------------------------------------------------------------------
# МНОЖЕСТВА
# Неупорядоченная совокупность элементов
# colors = {'red', 'green', 'blue'}
# print(type(colors)) # {'red', 'green', 'blue'}
# print(type(colors)) # <class 'set'> Класс множество
# colors.add('red') # не добавит ещё этот элемент уже есть в множестве.
# print(colors) # {'red', 'green', 'blue'}
# colors.add('gray') # добавит элемент в множество.
# print(colors) # {'red', 'green', 'blue','gray'}
# colors.remove('red') # Удалит элемент из множества
# print(colors) # {'green', 'blue','gray'}
# # colors.remove('red') # KeyError: 'red' Выдаст ошибку при попытки удать не существующий элемент.
# colors.discard('red') # ok удалит элемент и есть такого нет, ошибки не будет.
# print(colors) # {'green', 'blue','gray'}
# colors.clear() # { } очистит множество
# print(colors) # set() 
# ---------------------------------------------------------------------------------------
# a = {1, 2, 3, 5, 8}
# b = {'2', '5', 8, 13, 21}
# print(type(a)) # set
# print(type(b)) # set

# a = {1, 2, 3, 5, 8}
# b = set([2, 5, 8, 13, 21])
# c = set((2, 5, 8, 13, 21))
# print(type(a)) # set
# print(type(b)) # set
# print(type(c)) # set
# a = {1, 1, 1, 1, 1}
# print(a) # {1}
# ------------------------------------------------------------------------------------
# a = {1, 2, 3, 5, 8}
# b = {2, 5, 8, 13, 21}
# c = a.copy()          # c = {1, 2, 3, 5, 8} копирует множество.
# u = a.union(b)        # u = {1, 2, 3, 5, 8, 13, 21} объединяет множества
# i = a.intersection(b) # i = {8, 2, 5}
# dl = a.difference(b)  # dl = {1, 3}
# dr = b.difference(a)  # dr = {13, 21}
# q = a \
#  .union(b) \
#  .difference(a.intersection(b))
# {1, 21, 3, 13}
# НЕизменяемое множество.
# a = {1, 2, 3, 5, 8}
# b = frozenset(a) # В данном случает методы добавления, удаления работать не будут.
# print(b) # frozenset({1, 2, 3, 5, 8})
# --------------------------------------------------------------------------------------------------
# СПИСКИ
# list1 = [1, 2, 3, 4, 5]
# list2 = list1

# list1[0] = 123 # Поменяет значение элемента в list1 и list2
# list2[1] = 333 # Поменяет значение элемента в list1 и list2

# for e in list1:
#     print(e)
# print()
# for e in list2:
#     print(e)

list1 = [1, 2, 3, 4, 5]
# print(len(list1))
# print(list1.pop()) # Удалит последний элемент списка.
## print(list1.pop(2)) # Удалит конкретный элемент в списке.
## print(list1.append(11)) # Добавление в конец списка.
print(list1.insert(2, 11)) # Вставит на нужную позицию элемент.
print(list1)
# print(list1.pop())
# print(list1)
# print(list1.pop())
# print(list1)

