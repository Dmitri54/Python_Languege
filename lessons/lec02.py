# Урок 2. Знакомство с языком програм. Python.
# Данные, функции и модули в Python.
# Разберем: ============================================================================================
# Как работать с файлами;
# Как создаются методы;
# Зачем нужны модули;
# Напомнили себе рекурсию с python-особенностями;
# Научились хранить данные в:
#   Списки;
#   Кортежи;
#   Словари;
#   Множества.
# =================================================================================================
# ФАЙЛЫ:
# Хранение данных;
# Передача данных в клиент-серверных проектах;
# Хранение конфигов;
# Логирование действий.
# -------------------------------------------------------------------------------------------------
# Как работать с файлами:
# Связать файловую перемемнную с файлом, определив режим работы (модификатор работы).
# a - открытие для добавления данных (ЗАПИСЬ в ФАИЛ)
# r - открытие для чтения данных (ЧТЕНИЕ ФАЙЛА).
# w - открытие для записи данных (ПЕРЕЗАПИСЬ ФАЙЛА)
# w+, r+
# ========================================================================================================
# colors = ['red', 'green', 'blue3'] # Список _name_ = []
# data = open('file.txt', 'a') # Открою в режиме a - ЗАПИСЬ в ФАИЛ.
# # data.writelines(colors) # передаст строку в data.
# data.write('\nLINE 2 \n')
# data.write('LINE 3\n')
# data.close() # Закроет подключение к файлу.

# with open('file.txt', 'a') as data: # Ещё одна конструкция, для записи данных с фаил
#     data.write('line 123\n')
#     data.write('line 234\n')
# В данном случае писать data.close() не нужно. Закрытие происходит автоматически.

# exit() # Позволяет отключить код находящийся ниже.
# path = 'file.txt'
# data = open(path, 'r') # Открою в режиме r - ЧТЕНИЕ ФАЙЛА 
# for line in data:
#     print(line)
# data.close()
# --------------------------------------------------------------------------------------------------
# Функции и модули. Это фрагмент программы, используемый многократно.
# =================================================================================================
# def function_name(x):
# body line 1
# . . .
# body line n
 # optional return
# =================================================================================================
# ПРИМЕР МОДЕЛЯ:
# import lec01       # Подлючай фаил lec01.py
# print(lec01.f(1))  # Вызываю функцию f из фаила lec01.py, и тут же передаю значение переменной (1)
# -------------------------------------------------------------------------------------------------
# Чтобы не писать каждый раз длинное название файла, можно придумать сокращение и использовать его далее в коде.
# import lec01 as l 
# print(l.f(1))
# ---------------------------------------------------------------------------------------------------
# Значения по умолчанию, для функции.
# =======================================================================================================
# def new_string(symbol, count):
#     return symbol * count
# print(new_string('!', 5)) # !!!!!
# # print(new_string('!'))    # TypeError missiong 1 requered ...
# -------------------------------------------------------------------------------------------------------
# Чтобы не было ошибки, поставлю count = 3
# =======================================================================================================
# def new_string(symbol, count = 3):
#     return symbol * count
# print(new_string('!', 5)) # !!!!!
# print(new_string('!'))    # !!!
# print(new_string(4))      # 12 - Будет произведено умножение. Python распознает тип данных в момент вызова функции.
# ---------------------------------------------------------------------------------------------------
# Возможность передачи не ограниченного количества аргументов функции.
# ============================================================================================================
# def concatenatio(*params): # *argument
#     res: str = 0 # "" # тут можно заменить тип данных на int (res: int = 0) и работать с числами.
#     for item in params:
#         res += item
#     return res

# print(concatenatio('a', 's', 'd', 'w')) # asdw
# print(concatenatio('a', '1', 'd', '2')) # a1d2
# # print(concatenatio('1', '2', '3', '4')) # TypeError: ... т.к. с данном примере я работаю со строками, а не счислами. # равно 10.
# ---------------------------------------------------------------------------------------------------
# РЕКУРСИЯ
# ==========================================================================================================
# def fib(n): # Функция
#     if n in [1, 2]: # Прописал логику выхода.
#         return 1 # Для первых двух значений Фибоначчи ответ = 1 
#     else:
#         return fib(n - 1) + fib(n - 2) # Для остальных высчитывается по формуле.
# list = [] # Список
# for e in range(1, 10):
#     list.append(fib(e)) # Добавляю элемент в конец списка.
# print(list) # [1, 1, 2, 3, 5, 8, 13, 21, 34]
# ---------------------------------------------------------------------------------------------------
# КОРТЕЖИ - это некий неизменяемый "список"
# ==========================================================================================================
# t = ()         # Объявляю КОРТЕЖ
# print(type(t)) # <class 'tuple'>
# t = (1,)
# print(type(t)) # <class 'tuple'>
# t = (1)
# print(type(t)) # <class 'int'>
# t = (28, 9, 1990)
# print(type(t)) # <class 'tuple'>
# colors = ['red', 'green', 'blue']
# print(colors) # ['red', 'green', 'blue']
# t = tuple(colors) # Присвоил переменной t КОРТЕЖ colors
# print(t) # ('red', 'green', 'blue')

# exit()
# t = tuple(['red', 'green', 'blue'])
# print(t[0]) # red
# print(t[2]) # blue
# # print(t[10]) # IndexError: tuple index out of range
# print(t[-2]) # green
# # print(t[-200]) # IndexError: tuple index out of range
# for e in t:
#     print(e) # red green blue - с новой строки
# t[0] = 'black' # TypeError: 'tuple' object does not support item assignment
# # Так можно распоковать КОРТЕЖ в отдельные переменные
# exit()
# t = tuple(['red', 'green', 'blue'])
# # Создал список и конвертирую его в КОРТЕЖ.
# red, green, blue = t
# # Распоковываю его и превращаю в три не зависимые переменные.
# print('r:{} g:{} b:{}'.format(red, green, blue)) # r:red g:green b:blue
# ----------------------------------------------------------------------------------------------------------
# ПРИМЕР:
# -----------------------------------------------------------------------------------------------------------
# a, b = 3, 4 # Обычное множественное присваивание.
# (a) = (3, 4) # Это уже КОРТЕЖ.
# (a) = (3, 1, 41, 4)
# # a = (3,) - КОРТЕЖ из одного элемента.
# # a = (3) Ошибка, это не кортеж. Так писать нельзя.
# print(a) # (3, 4)
# print(a[0]) # 3
# print(a[-1]) # 4
# # print(a[-2])
# # a[0] = 12 Ошибка, присваивание координатам делать нельзя.

# a = (3, 4, 5)
# for item in a:
#     print(item) # 3 4 5 - с новой строки

# -------------------------------------------------------------------------------------------------
# СЛОВАРИ 
# Неупорядоченные коллекции произвольных объектов с доступом по ключу
# ========================================================================================================
# dictionary = {} # Создание пустово словаря
# dictionary = \
#     {
#         'up': '↑', # Ключ
#         'left': '←',
#         'down': '↓',
#         'right': '→'
#     } # Пишу \ чтобы писать код с новой строки, а не в одну строчку.

# # print(dictionary['up']) # Чтобы заменить значение
# # dictionary['up'] = 'fl'
# # print(  dictionary['up'])
# print(dictionary) # {'up':'↑', 'left': '←', 'down': '↓', 'right': '→'}
# print(dictionary['left']) # ←  
# # типы ключей могут отличаться

# for k in dictionary.keys(): # Так можно получить все ключи.
#     print(k) # up left down right - с новой строки
# --------------------------------------------------------------------------------------------------------
# for k in dictionary.values(): # Так можно получить все значения
#     print(k) # ↑ ← ↓ → - с новой строки
# --------------------------------------------------------------------------------------------------------
# for v in dictionary: # Чтобы пробежать по всем элементам словаря 
#     print(v) # Выдаст ключи
#     # print(dictionary[v]) # Выдаст только значения
# --------------------------------------------------------------------------------------------------
# МНОЖЕСТВА
# Неупорядоченная совокупность элементов
# ====================================================================================================
# colors = {'red', 'green', 'blue'}
# print(type(colors)) # <class 'set'>
# print(colors) # {'red', 'blue', 'green'}
# # colors.add('red') # не добавит ещё этот элемент уже есть в множестве.
# # print(colors) # {'red', 'green', 'blue'}
# colors.add('gray') # добавит элемент в множество.
# print(colors) # {'red', 'green', 'blue','gray'}
# colors.remove('red') # Удалит элемент из множества
# print(colors) # {'green', 'blue','gray'}
# # # colors.remove('red') # KeyError: 'red' Выдаст ошибку при попытки удать не существующий элемент.
# colors.discard('red') # Удалит элемент и если такого нет, ошибки не будет.
# print(colors) # {'green', 'blue','gray'}
# colors.clear() # { } очистит множество
# print(colors) # set() 
# ---------------------------------------------------------------------------------------
# a = {1, 2, 3, 5, 8}
# b = {'2', '5', 8, 13, 21}
# print(type(a)) # set
# print(type(b)) # set

# a = {1, 2, 3, 5, 8}
# b = set([2, 5, 8, 13, 21])
# c = set((2, 5, 8, 13, 21))
# print(type(a)) # set
# print(type(b)) # set
# print(type(c)) # set
# a = {1, 1, 1, 1, 1}
# print(a) # {1}
# -------------------------------------------------------------------------------------------------------
# ПРИМЕР:
# --------------------------------------------------------------------------------------------------------
# a = {1, 2, 3, 5, 8}
# b = {2, 5, 8, 13, 21}
# c = a.copy()          # копирует множество.
# print(c)              # {1, 2, 3, 5, 8}
# u = a.union(b)        # объединяет множества.
# print(b)              # {1, 2, 3, 5, 8, 13, 21} 
# i = a.intersection(b) # пересечение множеств a и b.
# print(i)              # {8, 2, 5}
# dl = a.difference(b)  # 
# print(dl)             # {1, 3}
# dr = b.difference(a)  # разница между b и a.
# print(dr)             # {13, 21}
# q = a \
#  .union(b) \
#  .difference(a.intersection(b))
# print(q)              # {1, 21, 3, 13}
# ---------------------------------------------------------------------------------------------------------
# НЕизменяемое множество.
# =========================================================================================================
# a = {1, 2, 3, 5, 8}
# b = frozenset(a) # Объявляю НЕизменяемое множество 
# # В данном случает методы добавление, удаление работать не будут.
# print(b) # frozenset({1, 2, 3, 5, 8})
# --------------------------------------------------------------------------------------------------
# СПИСКИ (удаление, добавление в список)
# ==========================================================================================================
# list1 = [1, 2, 3, 4, 5]
# list2 = list1 # Это не копирование это ссылка на один и тот же объект.

# # list1[0] = 123 # Поменяет значение элемента в list1 и list2
# # list2[1] = 333 # Поменяет значение элемента в list1 и list2

# for e in list1:
#     print(e)
# print()

# for e in list2:
#     print(e)

# list1 = [1, 2, 3, 4, 5]
# print(len(list1))  # 5 - длинна списка
# print(list1)       # [1, 2, 3, 4, 5]
# print(list1.pop()) # УДАЛИТ последний элемент списка (5).
# print(list1)       # [1, 2, 3, 4]
# print(list1.pop()) # Удалит последний элемент списка (4).
# print(list1)       # [1, 2, 3]
# print(list1.pop()) # Удалит последний элемент списка (3).
# print(list1)       # [1, 2]

# print(list1.pop(2)) # Удалит конкретный элемент в списке под индексом 2 (3). 
# print(list1)        # [1, 2, 4, 5]
# print(list1.insert(2, 11)) # ВСТАВИТ на нужную позицию 2 элемент cо значением (11).
# print(list1)        # [1, 2, 11, 4, 5]      
# print(list1.append(11)) # Добавление в конец списка.
# print(list1)        # [1, 2, 11, 4, 5, 11]

